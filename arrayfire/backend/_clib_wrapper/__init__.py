# flake8: noqa

__all__ = ["AFArrayType"]

from ._base import AFArrayType

__all__ += [
    "add",
    "sub",
    "mul",
    "div",
    "mod",
    "pow",
    "bitnot",
    "bitand",
    "bitor",
    "bitxor",
    "bitshiftl",
    "bitshiftr",
    "lt",
    "le",
    "gt",
    "ge",
    "eq",
    "neq",
    "sin",
    "cos",
    "tan",
    "asin",
    "acos",
    "atan",
    "atan2",
    "sinh",
    "cosh",
    "tanh",
    "asinh",
    "acosh",
    "atanh",
    "exp",
    "expm1",
    "log",
    "log1p",
    "log2",
    "log10",
    "sqrt",
    "cbrt",
    "hypot",
    "erf",
    "erfc",
    "tgamma",
    "lgamma",
    "pow2",
    "sign",
    "abs",
    "ceil",
    "floor",
    "round",
    "trunc",
    "isinf",
    "isnan",
    "iszero",
    "isinf",
    "isnan",
    "iszero",
    "isinf",
    "isnan",
    "clamp",
    "arg",
    "conjg",
    "cplx1",
    "cplx2",
    "imag",
    "factorial",
    "maxof",
    "minof",
    "real",
    "rem",
    "root",
    "rsqrt",
    "sigmoid",
    "land",
    "lor",
    "lnot",
]

from ._operators import (
    abs,
    acos,
    acosh,
    add,
    arg,
    asin,
    asinh,
    atan,
    atan2,
    atanh,
    bitand,
    bitnot,
    bitor,
    bitshiftl,
    bitshiftr,
    bitxor,
    cbrt,
    ceil,
    clamp,
    conjg,
    cos,
    cosh,
    cplx1,
    cplx2,
    div,
    eq,
    erf,
    erfc,
    exp,
    expm1,
    factorial,
    floor,
    ge,
    gt,
    hypot,
    imag,
    isinf,
    isnan,
    iszero,
    land,
    le,
    lgamma,
    lnot,
    log,
    log1p,
    log2,
    log10,
    lor,
    lt,
    maxof,
    minof,
    mod,
    mul,
    neq,
    pow,
    pow2,
    real,
    rem,
    root,
    round,
    rsqrt,
    sigmoid,
    sign,
    sin,
    sinh,
    sqrt,
    sub,
    tan,
    tanh,
    tgamma,
    trunc,
)

__all__ += [
    "create_array",
    "create_handle",
    "create_strided_array",
    "device_array",
    "get_ctype",
    "get_elements",
    "get_numdims",
    "retain_array",
    "get_dims",
    "get_scalar",
    "is_empty",
    "get_data_ptr",
    "copy_array",
    "index_gen",
    "transpose",
    "reorder",
    "array_as_str",
    "where",
    "get_last_error",
    "set_backend",
    "get_backend_count",
    "get_device_id",
    "get_size_of",
    "get_backend_id",
    "af_range",
    "identity",
    "flat",
]

from ._unsorted import (
    af_range,
    array_as_str,
    assign_gen,
    cast,
    copy_array,
    create_array,
    create_handle,
    create_strided_array,
    device_array,
    flat,
    get_backend_count,
    get_backend_id,
    get_ctype,
    get_data_ptr,
    get_device,
    get_device_id,
    get_dims,
    get_elements,
    get_last_error,
    get_numdims,
    get_offset,
    get_scalar,
    get_size_of,
    get_strides,
    identity,
    index_gen,
    is_empty,
    release_array,
    reorder,
    retain_array,
    set_backend,
    sync,
    transpose,
    where,
)

__all__ += ["safe_call"]

from ._error_handler import safe_call

__all__ += ["count_all"]

from ._reduction_operations import (
    all_true,
    all_true_all,
    any_true,
    any_true_all,
    count_all,
    sum,
    sum_all,
    sum_nan,
    sum_nan_all,
)

__all__ += ["create_constant_array"]

from ._constant_array import create_constant_array

__all__ += ["get_indices"]
from ._indexing import ParallelRange, get_indices

__all__ += ["create_random_engine", "release_random_engine", "AFRandomEngine"]
from ._random import (
    AFRandomEngine,
    create_random_engine,
    random_engine_get_seed,
    random_engine_get_type,
    random_engine_set_seed,
    random_engine_set_type,
    random_uniform,
    randu,
    release_random_engine,
)
